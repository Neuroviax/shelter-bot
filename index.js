import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import dotenv from 'dotenv';
import fs from 'fs';
import csv from 'csv-parser';

dotenv.config();

const app = express();
const port = process.env.PORT || 10000;

// HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app.get('/', (req, res) => {
  res.send('Bot is alive!');
});
app.listen(port, () => {
  console.log(`Web server is running on port ${port}`);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// –ó–∞–≥—Ä—É–∑–∫–∞ CSV
let shelters = [];

fs.createReadStream('–£–±–µ–∂–∏—â–∞_–†–∏—à–æ–Ω.csv')
  .pipe(csv())
  .on('data', (row) => {
    if (row.–®–∏—Ä–æ—Ç–∞ && row.–î–æ–ª–≥–æ—Ç–∞) {
      shelters.push({
        name: row.–ù–∞–∑–≤–∞–Ω–∏–µ || '–£–∫—Ä—ã—Ç–∏–µ',
        lat: parseFloat(row.–®–∏—Ä–æ—Ç–∞),
        lng: parseFloat(row.–î–æ–ª–≥–æ—Ç–∞),
        address: row.–ù–∞–∑–≤–∞–Ω–∏–µ || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'
      });
    }
  })
  .on('end', () => {
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–∫—Ä—ã—Ç–∏–π: ${shelters.length}`);
  });

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üìç, –∏ —è –ø–æ–∫–∞–∂—É –±–ª–∏–∂–∞–π—à–µ–µ —É–±–µ–∂–∏—â–µ.'
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
bot.on('location', (msg) => {
  const { latitude, longitude } = msg.location;

  if (shelters.length === 0) {
    bot.sendMessage(msg.chat.id, '–°–ø–∏—Å–æ–∫ —É–±–µ–∂–∏—â –µ—â—ë –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.');
    return;
  }

  const nearest = findNearestShelter(latitude, longitude);

  bot.sendVenue(
    msg.chat.id,
    nearest.lat,
    nearest.lng,
    nearest.name,
    nearest.address
  );
});

// –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É–∫—Ä—ã—Ç–∏—è
function findNearestShelter(lat, lng) {
  let nearest = null;
  let minDistance = Infinity;

  for (const shelter of shelters) {
    const dist = distance(lat, lng, shelter.lat, shelter.lng);
    if (dist < minDistance) {
      minDistance = dist;
      nearest = shelter;
    }
  }

  return nearest;
}

// –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
function distance(lat1, lon1, lat2, lon2) {
  const R = 6371;
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) ** 2 +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
    Math.sin(dLon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

function toRad(value) {
  return value * Math.PI / 180;
}
